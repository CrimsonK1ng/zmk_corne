/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define SYM 1
#define BRK 2
#define NUM 3
#define NAVI    4
#define ADJ  5

#define HYPER LS(LG(LC(LALT)))

&lt {
    tapping-term-ms = <200>;
};

&sl {
    release-after-ms = <2000>;
};

&soft_off {
    hold-time-ms = <5000>; // Only turn off it the key is held for 5 seconds or longer.
};

&caps_word {
  continue-list = <UNDERSCORE MINUS>;
};
/ {
  combos {

      // -----------------------------------------------------------------------------------------
      // |  0  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
      // |  12 |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
      // |  24 |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
      //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
    left_combo_esc {
      timeout-ms = <30>;
      key-positions = <14 15>;
      bindings = <&kp ESC>;
    };
    right_combo_esc {
      timeout-ms = <30>;
      key-positions = <20 21>;
      bindings = <&kp ESC>;
    };

    right_alt_bspc {
      timeout-ms = <30>;
      key-positions = <8 9>;
      bindings = <&kp LA(BSPC)>;
    };

    right_ctrl_bspc {
      timeout-ms = <30>;
      key-positions = <9 10>;
      bindings = <&kp LC(BSPC)>;
    };

  };
  macros {
    code_block: code_block {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_tap &kp GRAVE &kp GRAVE &kp GRAVE>
        ;
    };
  };
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick-tap-ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    caps: tap_dance_0 {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp GRAVE>, <&code_block>;
    };
  };
  keymap {
    compatible = "zmk,keymap";

    default_layer {
      // -----------------------------------------------------------------------------------------
      // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  | BKSP |
      // | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  '   |
      // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | ESC  |
      //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
      bindings = <
        &lt ADJ TAB     &kp Q        &lt NAVI W    &lt NUM F     &kp P         &kp B   /**/    &kp J   &kp L          &kp U             &lt BRK Y       &kp SEMI        &kp BSPC
        &sl SYM         &lt NAVI A   &lt SYM R     &hm LCTRL S   &hm LGUI T    &kp G   /**/    &kp M   &hm RGUI N     &hm RCTRL E       &lt SYM I       &kp O           &kp SQT
        &kp caps_word   &hm LGUI Z   &hm LCTRL X   &hm LALT C    &hm LSHFT D   &kp V   /**/    &kp K   &hm RSHFT H    &hm LALT COMMA    &hm RCTRL DOT   &hm RGUI FSLH   &kp ESC
                                                      &sl NUM &lt NUM BSPC &lt BRK RET   &sk LSHFT &lt SYM SPC &lt BRK TAB
      >;
    };
    sym_layer {
      bindings = <
        &kp trans  &kp TILDE    &kp FSLH     &kp COLON    &kp PLUS     &kp BSLH       &kp PIPE   &kp AMPS    &kp STAR &kp QMARK    &kp MINUS &trans
        &kp trans  &kp AT       &kp PRCNT    &kp EXCL     &kp EQUAL    &kc PIPE       &kp BSLH   &kp EQUAL   &kp DQT  &kp UNDER    &kp SEMI &trans
        &kp trans  &trans       &caps        &kp HASH     &kp LT       &kp GT         &kp SEMI   &kp CARET   &kp DLLR &trans       &trans &trans
                                             &trans       &trans       &trans         &trans     &trans   &trans
      >;
    };

    brk_layer {
      bindings = <
      &kp LSHFT    &kp LT         &kp GT         &kp LBRC         &kp RBRC         &trans           &trans     &trans     &trans   &trans      &trans   &trans
      &kp LSHFT    &trans         &kp LPAR       &kp RPAR         &trans           &trans           &trans     &trans     &trans   &trans      &trans   &trans
      &kp LSHFT    &trans         &kp LBKT       &kp RBKT         &trans           &trans           &trans     &trans     &trans   &trans      &trans   &trans
                                             &trans       &trans       &trans         &trans     &trans   &trans
      >;
    };
    num_layer {
      bindings = <
        &kp LSHFT  &trans       &sk LG(LCTRL) &trans       &trans      &trans         &trans   &kp N7   &kp N8 &kp N9    &trans &trans
        &kp LSHFT  &sk LGUI     &sk LALT     &sk LCTRL    &sk LSHFT    &sk HYPER      &trans   &kp N4   &kp N5 &kp N6    &trans &trans
        &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &kp N1   &kp N2 &kp N3    &trans &trans
                                             &trans       &trans       &kp DOT         &trans   &kp N0   &trans
      >;
    };
    navi_layer {
      bindings = <
        &kp trans  &trans       &trans       &trans       &trans      &trans         &trans     &kp LS(LC(TAB))    &kp LC(TAB) &trans    &trans &trans
        &kp trans  &trans       &sk LALT     &sk LCTRL    &sk LGUI    &sk HYPER      &kp LEFT   &kp DOWN           &kp UP      &KP RIGHT &trans &trans
        &kp trans  &trans       &trans       &sk LALT     &trans      &trans         &trans     &kp HOME           &kp END     &trans    &trans &trans
                                             &trans       &trans      &sk LSHFT      &trans     &kp RET            &trans
      >;
    };
    adjust_layer {
      bindings = <
          &trans      &BT_SEL 0        &BT_SEL 1        &BT_SEL 2        &BT_CLR          &bootloader             &bootloader       &trans             &trans         &trans              &trans     &trans
          &trans      &BT_SEL 3        &BT_SEL 4        &BT_SEL 5        &trans           &trans                  &trans            &kp C_PREV         &kp C_PP       &kp C_NEXT          &trans     &trans
          &trans      &trans           &trans           &trans           &trans           &trans                  &trans            &kp C_VOL_DN       &kp C_MUTE     &kp C_VOL_UP        &trans     &trans
                                                                &trans       &trans       &trans         &trans     &trans   &trans
      >;
    };
  };
};
